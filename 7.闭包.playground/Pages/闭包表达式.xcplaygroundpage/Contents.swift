//: 闭包表达式
//:
//: ----
//:  - 嵌套函数是在一个大函数中定义代码块的快捷方式。
//:  - 但有时候我们需要更简洁的方式，无需完整名称。
//:  - 这在你调用一个函数时，它的某个参数是另外一个函数时特别有用。
//:  - 闭包表达式就是一种“内联”的写闭包的方法，用一个简洁明快的语法。
//:  - 这节主要以sort函数为例。
//: ----

//: ----
//:  - sort函数是Swift标准库中的，用于对数组排序，返回一个排序后的新数组。
let 城市 = ["杭州","Amsterdam","New York","苏州"]
//:  - sort函数接受2个参数，第一个是要排序的数组，二是排序的规则。这个规则是一个接受数组中2个元素作为参数的闭包，其中指出“第一个元素出现在第一个元素之前”这个判断逻辑。
//:  - 这里的闭包就成了 (String, String) -> Bool
//:  - 🌰完整版的判断函数：
func 倒序(s1:String, s2:String) -> Bool {
    return s1 > s2
}

城市.sort(倒序)


//:  闭包表达式形式：
//:  -   { (参数列表) -> 返回值类型 in
//:  -       执行语句
//:  -   }
//:  - 用闭包表达式来改写以上例子：
城市.sort({(s1:String, s2:String) -> Bool in return s1 > s2})



//:  上下文类型推断
//:  - 排序闭包是作为一个参数传递给sort函数的，所以Swift可以对其进行参数和返回类型推断。
//:  - 所以闭包的函数类型可以完全省略。
城市.sort({(s1, s2) in return s1 > s2})
//:  可隐式返回
//:  - 单表达式可以忽略return关键词
城市.sort({(s1, s2) in s1 > s2})

//:  快捷参数名
//:  - Swift给闭包提供快捷参数名,以$开头，0开始递增，用于推断参数。这样便可忽略参数列表。
城市.sort({ $0 > $1 })



//:  可尾随的语法
//:  - 当闭包是函数的最后一个参数时，调用时可以把整个闭包写在参数列表的尾部
城市.sort(){ $0 > $1 }



//:  ⭐️操作符函数
//:  - 还可以进一步缩短，因为 > 操作符，可以自动推断参数。
城市.sort( < )
//: [值捕获](@next)
